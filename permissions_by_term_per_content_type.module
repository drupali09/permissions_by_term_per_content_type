<?php

/**
 * @file
 * Allows access to terms in a vocabulary to be limited by role per content type.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormState;
use Drupal\permissions_by_term_per_content_type\Controller\PermissionsByTermPerContentTypeController;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_type_alter().
 *
 * Adds the Manage term perms tab to the entity configuration page.
 */
function permissions_by_term_per_content_type_entity_type_alter(array &$entity_types) {
  $module_handler = \Drupal::moduleHandler();
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    // Support core entity types only. Contrib and custom entity types should
    // use a hook or service (@todo https://www.drupal.org/node/2829571).
    $core_entity = FALSE;
    $module_name = $entity_type->getProvider();
    if ($module_name != 'core') {
      // Identify core entity types that are provided by modules.
      $module = $module_handler->getModule($module_name);
      if (preg_match('/^core/', $module->getPath())){
        $core_entity = TRUE;
      }
    }
    else {
      // Some core entity types are not provided by a module.
      $core_entity = TRUE;
    }
    if ($core_entity && $entity_type instanceof ConfigEntityType && $entity_type->hasLinkTemplate('edit-form')) {
      $entity_type->setLinkTemplate('manage-term-perms', $entity_type->getLinkTemplate('edit-form') . "/manage-term-perms");
    }
  }
}

/**
 * Implements hook_help().
 */
function permissions_by_term_per_content_type_help($route_name, RouteMatchInterface $arg) {
  switch ($route_name) {
    case 'help.page.permissions_by_term_per_content_type':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The "Permissions by Term per content type " (PbTpCT) module allows taxonomy administrators the
        ability to restrict setting individual terms on nodes by role. If a user is unable to set any terms for a required
        vocabulary, they are blocked from adding or editing content with
        that vocabulary. For more information, see the online documentation for <a href=":PbTpCT-documentation" target="_blan" title="Online Documentation">Permissions by Term per Content type</a>.', array(':PbTpCT-documentation' => 'https://www.drupal.org/project/permissions_by_term_per_content_type')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('General') . '</dt>';
      $output .= '<dd>' . t('Use Permissions by Term per Content type to easily build access-restricted content areas on your websites.') . '</dd>';
      $output .= '<dt>' . t('Lightweight Access Control') . '</dt>';
      $output .= '<dd>' . t('Permissions by Term per Content type restricts user access to specified Drupal nodes based on taxonomy terms - a core part of Drupalâ€™s functionality. PbTpCT lets you restrict content access while relying on very little contributed code.') . '</dd>';
      $output .= '</dl>';

      return $output;

    case 'user.admin_permissions':
      $config = \Drupal::service('config.factory')->getEditable('permissions_by_term_per_content_type.settings');
      $permissions_by_term_per_content_type_track = $config->get('permissions_by_term_per_content_type_track');
      //kint($permissions_by_term_per_content_type_track);
      if (count($permissions_by_term_per_content_type_track)) {
        foreach ($permissions_by_term_per_content_type_track as $key => $value) {
          //kint($key);
        }
        $output = '<p class="PbTpCT-msg">' . t('Content permissions are also being managed by "Permissions by term per content type" module.') . '</p>';
      }
      return $output;
  }
}

/**
 * Validation handler for permissions_by_term_per_content_type_form_alter().
 */
function permissions_by_term_per_content_type_validate($form, FormState $oFormState) {
  foreach ($form as $field) {
    if (!is_object($field) && !empty($field['widget'][0]['target_id']['#target_type']) && $field['widget'][0]['target_id']['#target_type'] == 'taxonomy_term') {
      $field_name = $field['widget']['#field_name'];

      //$contentType = $form['#process'][1][0]->getTargetBundle();
      $contentType = $oFormState->getStorage()['form_display']->getTargetBundle();

      $terms = $oFormState->getValues()[$field_name];//['target_id'];
      $not_allowed_term_names = array();
      if (!empty($terms)) {
        foreach ($terms as $term) {
          $term_id = $term['target_id'];
          /* @var \Drupal\permissions_by_term_per_content_type\AccessCheck $access_check_service */
          $access_check_service = \Drupal::service('permissions_by_term_per_content_type.access_check');
          if (!$access_check_service->isAccessAllowedByDatabase($term_id, $uid = FALSE, $contentType)) {
            $term = Term::load($term_id);
            $not_allowed_term_names[] = $term->getName();
          }
        }
      }
    }
  }
  if (!empty($not_allowed_term_names)) {
    if (count($not_allowed_term_names) > 1) {
      $term_names = implode(', ', $not_allowed_term_names);
    }
    else {
      $term_names = $not_allowed_term_names['0'];
    }
    $oFormState->setErrorByName('field_tags', t('You are not allowed to use specific taxonomy terms like the following: :term-names. Remove the restricted taxonomy terms from the form field and try again.',
      [':term-names' => $term_names]));
  }
}

/**
 * Submit handler for permissions_by_term_per_content_type_form_alter().
 */
function permissions_by_term_per_content_type_submit($form, FormState $formState) {
  $termId = $formState->getFormObject()->getEntity()->id();
  /* @var \Drupal\permissions_by_term_per_content_type\AccessStorage $access_storage */
  $access_storage = \Drupal::service('permissions_by_term_per_content_type.access_storage');
  $access_storage->saveTermPermissions($formState, $termId);
  /**
   * @var \Drupal\permissions_by_term_per_content_type\NodeAccess $nodeAccess
   */
  $nodeAccess = \Drupal::service('permissions_by_term_per_content_type.node_access');
  $nodeAccess->rebuildByTid($termId, $formState);
  Cache::invalidateTags(['search_index:node_search']);
}

/**
 * Implements hook_form_alter().
 */
function permissions_by_term_per_content_type_form_taxonomy_term_form_alter(&$form, FormStateInterface $oFormState, $form_id) {
  if (\Drupal::currentUser()->hasPermission('show term permission form on term page')) {
    $iTermId = $oFormState->getFormObject()->getEntity()->id();
    $vocabId = $oFormState->getFormObject()->getEntity()->getVocabularyId();

    $config = \Drupal::service('config.factory')->getEditable('permissions_by_term_per_content_type.settings');
    $permissions_by_term_per_content_type_track = $config->get('permissions_by_term_per_content_type_track');

    /* @var \Drupal\permissions_by_term_per_content_type\AccessStorage $access_storage */
    $access_storage = \Drupal::service('permissions_by_term_per_content_type.access_storage');
//kint($permissions_by_term_per_content_type_track);exit;

    if (count($permissions_by_term_per_content_type_track)) {
      $form['access'] = array(
        '#type' => 'fieldset',
        '#title' => t('Permissions'),
        '#description' => t('To limit access to this term by roles,
      add roles to the following lists. Leave empty to allow
      node access by single node view, node listing in views and taxonomy
      term selection by all users.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#attributes' => array('id' => 'fieldset_term_access'),
        '#weight' => -5,
        '#tree' => TRUE,
      );
    }
    /*$aAllowedUsers = $access_storage->getAllowedUserIds($iTermId);
    if (!empty($aAllowedUsers)) {
      $aAllowedUsers = user_load_multiple($aAllowedUsers);
      $sUserFormValue = $access_storage->getUserFormValue($aAllowedUsers);
    }
    else {
      $sUserFormValue = NULL;
    }*/

    $aAllowedRoles = $access_storage->getExistingRoleTermPermissionsByTid($iTermId);

    // Firstly fetch all translated allowed role names.
    $aTranslatedAllowedRoleNames = array();
    foreach ($aAllowedRoles as $role) {
      //foreach ($role as $key => $value) {
        $aTranslatedAllowedRoleNames[$role->content_type][] = $role->rid;
      //}
    }

    // Get all roles for the complete form and translate them.
    $aTranslatedUserRoles = array();
    $array_key_counter = 1;
    foreach (user_roles() as $user_role_id => $user_role_name) {
      $aTranslatedUserRoles[$user_role_id] = $user_role_name->label();
      $array_key_counter++;
    }

    // Generate the default values for the form.
    $aSetRoles = array();
    if (!empty($aTranslatedAllowedRoleNames)) {
      foreach ($aTranslatedAllowedRoleNames as $key => $role_name) {
        $aSetRoles[$key] = $role_name;
      }
    }

    $contentTypes = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();

    $contentTypesList = [];
    foreach ($contentTypes as $contentType) {
      $contentTypesList[$contentType->id()] = $contentType->label();
    }


    foreach ($contentTypesList as $contentTypeId => $contentTypeName) {
      //kint($permissions_by_term_per_content_type_track[$contentTypeId]);exit;
      if (isset($permissions_by_term_per_content_type_track[$contentTypeId])) {
        foreach ($permissions_by_term_per_content_type_track[$contentTypeId] as $k => $v) {
          if ($v == 1) {
            $enabled_taxo[] = key(\Drupal::entityManager()
              ->getFieldDefinitions('node', $contentTypeId)[$k]->getSettings()['handler_settings']['target_bundles']);
          }
        }
        if (in_array($vocabId, $enabled_taxo)) {
          $form['access'][$contentTypeId]['content_type_name'] = array(
            '#markup' => t('Allowed roles for ') . '<b>' . $contentTypeName . '</b>',
          );

          $form['access'][$contentTypeId]['role'] = array(
            '#type' => 'checkboxes',
            '#title' => t(''),
            '#description' => t('Select a role to allow all members of this role to
            use this term and access related nodes in single node view and views
            listings.'),
            '#default_value' => $aSetRoles[$contentTypeId],
            '#options' => $aTranslatedUserRoles,
            '#multiple' => FALSE,
            //'#weight' => 5,
          );

        }
      }
    }

    $form['#validate'][] = 'permissions_by_term_per_content_type_validate';
    $form['actions']['submit']['#submit'][] = 'permissions_by_term_per_content_type_submit';
  }
}

/**
 * Implements hook_form_alter().
 */
function permissions_by_term_per_content_type_form_alter(&$form, FormStateInterface $oFormState, $form_id) {
  $form['#validate'][] = 'permissions_by_term_per_content_type_validate';
}

/**
 * Implements hook_node_access().
 *
 * Forwards user by drupal_access_denied(); to an access denied page, if a
 * single restricted node is called.
 *
 * This hook is not fired if admin is logged in. Users with the
 * "bypass node access" permission may always view and edit content
 * through the administrative interface.
 */
function permissions_by_term_per_content_type_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if (method_exists($node, 'id') && $op == 'view') {
    if (!$node->isPublished() && $account->isAnonymous()) {
      return AccessResult::forbidden();
    }

    /* @var \Drupal\permissions_by_term_per_content_type\AccessCheck $access_check_service */
    $access_check_service = \Drupal::service('permissions_by_term_per_content_type.access_check');
    $oPermissionsByTermPerContentTypeController = new PermissionsByTermPerContentTypeController($access_check_service);

    return $oPermissionsByTermPerContentTypeController->handleNode($node->id());
  }
}

/**
 * Implements hook_node_grants().
 */
function permissions_by_term_per_content_type_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {
    if ($op == 'view') {
      /**
       * @var \Drupal\permissions_by_term_per_content_type\AccessStorage $accessStorage
       */
      $accessStorage = \Drupal::service('permissions_by_term_per_content_type.access_storage');
      $grants = $accessStorage->getGidsByRealm('permissions_by_term_per_content_type__uid_' . \Drupal::currentUser()->id());

      return $grants;
    }
}

/**
 * Implements hook_node_access_records().
 *
 * Permissions can be rebuild at /admin/reports/status/rebuild.
 */
function permissions_by_term_per_content_type_node_access_records(\Drupal\node\NodeInterface $node) {
  /**
   * @var \Drupal\permissions_by_term_per_content_type\NodeAccess $nodeAccess
   */
  $nodeAccess = \Drupal::service('permissions_by_term_per_content_type.node_access');
  $grantsForThisNode = $nodeAccess->createGrants($node->id());

  $grants = [];
  if (!empty($grantsForThisNode)) {
    foreach ($grantsForThisNode as $grantObject) {
      $grants[] = array(
        'realm' => $grantObject->realm,
        'gid' => $grantObject->gid,
        'grant_view' => $grantObject->grant_view,
        'grant_update' => $grantObject->grant_update,
        'grant_delete' => $grantObject->grant_delete,
        'langcode' => $grantObject->langcode,
        'fallback' => 1,
        'nid' => $node->id(),
      );
    }
  }

  return $grants;
}

/**
 * Implements hook_user_insert().
 */
function permissions_by_term_per_content_type_user_insert($user) {
  /**
   * @var \Drupal\permissions_by_term_per_content_type\NodeAccess $nodeAccess
   */
  $nodeAccess = \Drupal::service('permissions_by_term_per_content_type.node_access');
  $nodeAccess->rebuildByUid($user->id(), TRUE);
  Cache::invalidateTags(['search_index:node_search']);
}

/**
 * Implements hook_user_update().
 */
function permissions_by_term_per_content_type_user_update($user) {
  /**
   * @var \Drupal\permissions_by_term_per_content_type\NodeAccess $nodeAccess
   */
  $nodeAccess = \Drupal::service('permissions_by_term_per_content_type.node_access');
  $nodeAccess->rebuildByUid($user->id());
  Cache::invalidateTags(['search_index:node_search']);
}

/**
 * Implements hook_node_insert().
 */
function permissions_by_term_per_content_type_node_insert($node) {
  /**
   * @var \Drupal\permissions_by_term_per_content_type\NodeAccess $nodeAccess
   */
  $nodeAccess = \Drupal::service('permissions_by_term_per_content_type.node_access');
  $nodeAccess->rebuildByNid($node->id());
  Cache::invalidateTags(['search_index:node_search']);
}

/**
 * Implements hook_preprocess_page().
 */
function permissions_by_term_per_content_type_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    // Adding a css file to the permissions Administration Page.
    case 'user.admin_permissions':
      $variables['#attached']['library'][] = 'permissions_by_term_per_content_type/alert_message';
      break;
  }
}
